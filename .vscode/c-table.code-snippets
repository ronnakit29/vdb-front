{
  "BankTable": {
    "prefix": "c-table",
    "body": [
      "import React, { useEffect } from 'react'",
      "import TableComponent from './Table'",
      "import { useDispatch, useSelector } from 'react-redux'",
      "import { set${1:DynamicName}List, setReload$1 } from '../store/slices/${1:DynamicName}Slice'",
      "import { useRouter } from 'next/router'",
      "import client from '../services/client'",
      "import { setAlert } from '../store/slices/alertSlice'",
      "import { BsBank } from 'react-icons/bs'",
      "",
      "function ${1:DynamicName}Table() {",
      "    const data = useSelector(state => state.${1:DynamicName}.${1:DynamicName}List)",
      "    const reload = useSelector(state => state.${1:DynamicName}.reload$1)",
      "    const dispatch = useDispatch()",
      "    const router = useRouter()",
      "    const headers = []",
      "    function handleClick(row) {",
      "        console.log(row)",
      "    }",
      "    useEffect(()=>{",
      "     if(reload) { ${1:DynamicName}Table(); } ",
      "},[reload])",
      "    async function fetch${1:DynamicName}List() {",
      "        try {",
      "            const response = await client.adminGet${1:DynamicName}List()",
      "            dispatch(set${1:DynamicName}List(response.data))",
      "            dispatch(setReload(false))",
      "        } catch (error) {",
      "            dispatch(setAlert({",
      "                show: true,",
      "                message: error?.response?.data?.error || error.message,",
      "                color: \"red\",",
      "            }))",
      "        }",
      "    }",
      "    useEffect(() => {",
      "        if (router.isReady) {",
      "            fetch${1:DynamicName}List()",
      "        }",
      "    }, [router.isReady])",
      "    return (",
      "        <TableComponent Icon={BsBank} tableName=\"รายการบัญชี\" headers={headers} rows={data} onRowClick={handleClick} textButton=\"จัดการ\">",
      "        </TableComponent>",
      "    )",
      "}",
      "",
      "export default ${1:DynamicName}Table"
    ],
    "description": "Creates a BankTable component with dynamic name"
  },
  "c-api-call": {
    "prefix": "c-api-call",
    "body": [
      "async adminGet${1:Resource}List() {",
      "    const response = await this.instance.call(",
      "        \"GET\",",
      "        \"/api/v3/admin/${2:endpoint}\"",
      "    );",
      "    return response.data;",
      "}"
    ],
    "description": "Creates an async API call function"
  },
  "Class Get Admin Data": {
    "prefix": "class-get-admin-data",
    "body": [
      "async adminGet${1/\\b(\\w)(\\w*)\\b/${1:/upcase}${2:/downcase}/g}List() {",
      "    const response = await this.instance.call(\"GET\", \"/api/v3/admin/${1:example}\");",
      "    return response.data;",
      "  }",
      "  async adminGet${1/\\b(\\w)(\\w*)\\b/${1:/upcase}${2:/downcase}/g}(id) {",
      "    const response = await this.instance.call(\"GET\", \"/api/v3/admin/${1:example}/\" + id);",
      "    return response.data;",
      "  }",
      "  async adminUpdate${1/\\b(\\w)(\\w*)\\b/${1:/upcase}${2:/downcase}/g}(id, data) {",
      "    const response = await this.instance.call(\"PUT\", \"/api/v3/admin/${1:example}/\" + id, data);",
      "    return response.data;",
      "  }",
      "  async adminDelete${1/\\b(\\w)(\\w*)\\b/${1:/upcase}${2:/downcase}/g}(id) {",
      "    const response = await this.instance.call(\"DELETE\", \"/api/v3/admin/${1:example}/\" + id);",
      "    return response.data;",
      "  }"
    ],
    "description": "Class Get Admin Data"
  },
  "Sms GetLayout": {
    "prefix": "lyo",
    "body": [
      "${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2}/}.getLayout = function getLayout(page) {",
      "  return <Layout>",
      "    {page}",
      "  </Layout>",
      "}"
    ],
    "description": "Create a getLayout function with JSX syntax and capitalized filename"
  },
  "c-table2": {
    "prefix": "c-table2",
    "body": [
      "import React, { useEffect } from 'react'",
      "import TableComponent from './Table'",
      "import { useDispatch, useSelector } from 'react-redux'",
      "import { useRouter } from 'next/router'",
      "import { FaList } from 'react-icons/fa'",
      "import { get${1/(.*)/${1:/capitalize}/}List } from '../store/actions/${2:${1:example}}Action'",
      "${0}",
      "function ${1/(.*)/${1:/capitalize}/}Table() {",
      "    const ${1:example} = useSelector(state => state.${2:${1:example}}.${1:example}List)",
      "    const data = ${1:example}.map((item) => {",
      "        return {",
      "            ...item,",
      "        }",
      "    })",
      "    const dispatch = useDispatch()",
      "    const router = useRouter()",
      "    const headers = []",
      "",
      "    async function fetch${1/(.*)/${1:/capitalize}/}List() {",
      "        dispatch(get${1/(.*)/${1:/capitalize}/}List())",
      "    }",
      "    useEffect(() => {",
      "        if (router.isReady) {",
      "            fetch${1/(.*)/${1:/capitalize}/}List()",
      "        }",
      "    }, [router.isReady])",
      "    function handleClick(row) {",
      "        // console.log(row)",
      "    }",
      "    return (",
      "        <TableComponent onReload={fetch${1/(.*)/${1:/capitalize}/}List} Icon={FaList} tableName=\"${3:รายการ}\" headers={headers} rows={data} onRowClick={handleClick} textButton=\"จัดการ\">",
      "        </TableComponent>",
      "    )",
      "}",
      "",
      "export default ${1/(.*)/${1:/capitalize}/}Table"
    ],
    "description": "c-table2"
  },
  "c-dialog": {
    "prefix": "c-dialog",
    "body": [
      "import React, { useEffect } from 'react'",
      "import DialogComponent from './Dialog'",
      "import { useDispatch, useSelector } from 'react-redux'",
      "import { setDialog } from '../store/slices/utilSlice'",
      "import { CardBody } from '@nextui-org/react'",
      "",
      "function ${1/(.*)/${1:/capitalize}/}Dialog() {",
      "    const ${1:example}Dialog = useSelector(state => state.util.dialog.${1:example})",
      "    const ${1:example}Title = useSelector(state => state.util.title.${1:example})",
      "    const dispatch = useDispatch()",
      "    function handleClose() {",
      "        dispatch(setDialog({ ${1:example}: false }))",
      "    }",
      "    function init() {",
      "",
      "    }",
      "    useEffect(() => {",
      "       if(${1:example}Dialog) {",
      "           init()",
      "       }",
      "    }, [${1:example}Dialog])",
      "    return (",
      "        <DialogComponent isOpen={${1:example}Dialog} title={${1:example}Title} onClose={handleClose} >",
      "            <CardBody>",
      "               ${0}",
      "            </CardBody>",
      "        </DialogComponent>",
      "    )",
      "}",
      "",
      "export default ${1/(.*)/${1:/capitalize}/}Dialog"
    ],
    "description": "c-dialog"
  },
  "c-prop": {
    "prefix": "c-prop",
    "body": [
      "const dispatch = useDispatch()",
      "    function handleAdd${1/(.*)/${1:/capitalize}/}() {",
      "        dispatch(setDialog({ ${1:example}: true }))",
      "        dispatch(setTitle({ ${1:example}: \"เพิ่มผู้ให้บริการ\" }))",
      "        dispatch(set${1/(.*)/${1:/capitalize}/}(null))",
      "    }"
    ],
    "description": "c-prop"
  },
  "c-dialogfnc": {
    "prefix": "c-dialogfnc",
    "body": [
      "function handleOpenDialog() {",
      "     dispatch(setDialog({ ${1:example}: true }))",
      "     dispatch(setTitle({ ${1:example}: \"${2:example}\" }))",
      "}"
    ],
    "description": "c-dialogfnc"
  },
  "date state": {
    "prefix": "date-state",
    "body": [
      "const [startDate, setStartDate] = React.useState(dayjs${0}().startOf('month').format('YYYY-MM-DD HH:mm:ss'))",
      "const [endDate, setEndDate] = React.useState(dayjs().endOf('month').format('YYYY-MM-DD HH:mm:ss'))"
    ],
    "description": "date state"
  },
  "date html": {
    "prefix": "date-html",
    "body": [
      "<div className=\"grid grid-cols-2 gap-4\">",
      "  <div>",
      "    <Input${0} label='วันที่เริ่ม' type=\"datetime-local\" value={startDate}",
      "    onChange={(e) => setStartDate(e.target.value)} />",
      "  </div>",
      "  <div>",
      "    <Input label='วันที่สิ้นสุด' type=\"datetime-local\" value={endDate}",
      "    onChange={(e) => setEndDate(e.target.value)} />",
      "  </div>",
      "</div>"
    ],
    "description": "date html"
  }
}

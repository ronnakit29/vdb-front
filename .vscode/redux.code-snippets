{
  "Redux CRUD": {
    "prefix": "rdx-crud",
    "body": [
      "import client from \"../../services/client\";",
      "import { setAlert } from \"../slices/alertSlice\";",
      "import { setDialog } from \"../slices/dialogSlice\";",
      "import { set${1/(.*)/${1:/capitalize}/}, set${1/(.*)/${1:/capitalize}/}List } from \"../slices/${1:example}Slice\";",
      "",
      "export function get${1/(.*)/${1:/capitalize}/}List() {",
      "  return async (dispatch) => {",
      "    try {",
      "      const response = await client.adminGet${1/(.*)/${1:/capitalize}/}List();",
      "      dispatch(set${1/(.*)/${1:/capitalize}/}List(response.data));",
      "    } catch (error) {",
      "      dispatch(",
      "        setAlert({",
      "          message: error?.response?.data?.error || error.message,",
      "          color: \"red\",",
      "          show: true,",
      "        })",
      "      );",
      "    }",
      "  };",
      "}",
      "",
      "export function get${1/(.*)/${1:/capitalize}/}(id) {",
      "  return async (dispatch) => {",
      "    try {",
      "      const response = await client.adminGet${1/(.*)/${1:/capitalize}/}(id);",
      "      dispatch(set${1/(.*)/${1:/capitalize}/}(response.data));",
      "    } catch (error) {",
      "      dispatch(",
      "        setAlert({",
      "          message: error?.response?.data?.error || error.message,",
      "          color: \"red\",",
      "          show: true,",
      "        })",
      "      );",
      "    }",
      "  };",
      "}",
      "",
      "export function update${1/(.*)/${1:/capitalize}/}(id, data) {",
      "  return async (dispatch) => {",
      "    try {",
      "      const response = await client.adminUpdate${1/(.*)/${1:/capitalize}/}(id, data);",
      "      dispatch(",
      "        setAlert({",
      "          show: true,",
      "          message: \"อัพเดทข้อมูลสำเร็จ!\",",
      "          color: \"green\",",
      "        })",
      "      );",
      "      dispatch(get${1/(.*)/${1:/capitalize}/}List());",
      "      dispatch(",
      "        setDialog({",
      "          ${1}: false,",
      "        })",
      "      );",
      "    } catch (error) {",
      "      dispatch(",
      "        setAlert({",
      "          show: true,",
      "          message: error?.response?.data?.error || error.message,",
      "          color: \"red\",",
      "        })",
      "      );",
      "    }",
      "  };",
      "}",
      "",
      "export function create${1/(.*)/${1:/capitalize}/}(data) {",
      "  return async (dispatch) => {",
      "    try {",
      "      const response = await client.adminCreate${1/(.*)/${1:/capitalize}/}(data);",
      "      dispatch(",
      "        setAlert({",
      "          show: true,",
      "          message: \"เพิ่มข้อมูลสำเร็จ!\",",
      "          color: \"green\",",
      "        })",
      "      );",
      "      dispatch(get${1/(.*)/${1:/capitalize}/}List());",
      "      dispatch(",
      "        setDialog({",
      "          ${1}: false,",
      "        })",
      "      );",
      "    } catch (error) {",
      "      dispatch(",
      "        setAlert({",
      "          show: true,",
      "          message: error?.response?.data?.error || error.message,",
      "          color: \"red\",",
      "        })",
      "      );",
      "    }",
      "  };",
      "}",
      "export function delete${1/(.*)/${1:/capitalize}/}(id) {",
      "  return async (dispatch) => {",
      "    try {",
      "      const response = await client.adminDelete${1/(.*)/${1:/capitalize}/}(id);",
      "      dispatch(",
      "        setAlert({",
      "          show: true,",
      "          message: \"ลบข้อมูลสำเร็จ!\",",
      "          color: \"green\",",
      "        })",
      "      );",
      "      dispatch(get${1/(.*)/${1:/capitalize}/}List());",
      "      dispatch(",
      "        setDialog({",
      "          ${1}: false,",
      "        })",
      "      );",
      "    } catch (error) {",
      "      dispatch(",
      "        setAlert({",
      "          show: true,",
      "          message: error?.response?.data?.error || error.message,",
      "          color: \"red\",",
      "        })",
      "      );",
      "    }",
      "  };",
      "}"
    ],
    "description": "Redux CRUD"
  },
  "${1:SliceName}Slice": {
	"prefix": "rdx-slice",
	"body": [
	  "import { createSlice } from \"@reduxjs/toolkit\";",
	  "",
	  "const initialState = {",
	  "\t${1}: null,",
	  "\t${1}List: [],",
	  "};",
	  "const ${1}Slice = createSlice({",
	  "\tname: \"${1}\",",
	  "\tinitialState: initialState,",
	  "\treducers: {",
	  "\t\tset${1/(.*)/${1:/capitalize}/}: (state, action) => {",
	  "\t\t\tstate.${1} = action.payload;",
	  "\t\t},",
	  "\t\tset${1/(.*)/${1:/capitalize}/}List: (state, action) => {",
	  "\t\t\tstate.${1}List = action.payload;",
	  "\t\t},",
	  "\t},",
	  "});",
	  "",
	  "export const { set${1/(.*)/${1:/capitalize}/}, set${1/(.*)/${1:/capitalize}/}List } = ${1}Slice.actions;",
	  "export default ${1}Slice.reducer;"
	],
	"description": "Create a Redux Toolkit slice"
  },
  "c-class": {
    "prefix": "c-class",
    "body": [
      "async adminGet${1/(.*)/${1:/capitalize}/}List() {",
      "    const response = await this.instance.call(\"GET\", \"/api/v3/admin/${1:example}\");",
      "    return response.data;",
      "  }",
      "  async adminGet${1/(.*)/${1:/capitalize}/}(id) {",
      "    const response = await this.instance.call(",
      "      \"GET\",",
      "      \"/api/v3/admin/${1:example}/\" + id",
      "    );",
      "    return response.data;",
      "  }",
      "  async adminCreate${1/(.*)/${1:/capitalize}/}(data) {",
      "    const response = await this.instance.call(",
      "      \"POST\",",
      "      \"/api/v3/admin/${1:example}\",",
      "      data",
      "    );",
      "    return response.data;",
      "  }",
      "  async adminUpdate${1/(.*)/${1:/capitalize}/}(id, data) {",
      "    const response = await this.instance.call(",
      "      \"PUT\",",
      "      \"/api/v3/admin/${1:example}/\" + id,",
      "      data",
      "    );",
      "    return response.data;",
      "  }",
      "  async adminDelete${1/(.*)/${1:/capitalize}/}(id) {",
      "    const response = await this.instance.call(",
      "      \"DELETE\",",
      "      \"/api/v3/admin/${1:example}/\" + id",
      "    );",
      "    return response.data;",
      "  }"
    ],
    "description": "c-class"
  }
  ,
  "c-confirm": {
    "prefix": "c-confirm",
    "body": [
      "function handleSubmit${1/(.*)/${1:/capitalize}/}(e) {",
      "        e.preventDefault()",
      "            dispatch(setConfirm({",
      "                isOpen: true,",
      "                title: '${2:Title}',",
      "                onConfirm: () => dispatch(${1:functionName}())",
      "            }))",
      "    }"
    ],
    "description": "c-confirm"
  },
  "Dialog Admin v2": {
    "prefix": "c-dialog2",
    "body": [
      "import React, { useEffect, useState } from 'react'",
      "import DialogComponent from './Dialog'",
      "import { useDispatch, useSelector } from 'react-redux'",
      "import { setDialog } from '../store/slices/dialogSlice'",
      "import { Button, CardBody, Input, Textarea } from '@material-tailwind/react'",
      "import { create${1/(.*)/${1:/capitalize}/}, update${1/(.*)/${1:/capitalize}/} } from '../store/actions/${1}Action'",
      "",
      "function ${1/(.*)/${1:/capitalize}/}Dialog() {",
      "    const ${1}Dialog = useSelector(state => state.dialog.dialog.${1})",
      "    const ${1}Title = useSelector(state => state.dialog.title.${1})",
      "    const ${1} = useSelector(state => state.${1}.${1})",
      "",
      "    const dispatch = useDispatch()",
      "    function handleClose() {",
      "        dispatch(setDialog({ ${1}: false }))",
      "    }",
      "    async function handleSubmit(e) {",
      "        e.preventDefault();",
      "        if (${1}?.id) {",
      "            dispatch(update${1/(.*)/${1:/capitalize}/}(${1}.id, { name, template }))",
      "        } else {",
      "            dispatch(create${1/(.*)/${1:/capitalize}/}({ name, template }))",
      "        }",
      "    }",
      "    ",
      "    function resetForm() {",
      "        ",
      "    }",
      "    useEffect(() => {",
      "        if (${1}?.id) {",
      "        ",
      "        } else {",
      "            resetForm()",
      "        }",
      "    }, [${1}])",
      "    return (",
      "        <DialogComponent isOpen={${1}Dialog} title={${1}Title} onClose={handleClose} >",
      "            <CardBody>",
      "                <form className=\"flex flex-col gap-4\" onSubmit={handleSubmit}>",
      "                    <Button color=\"green\" type=\"submit\" size='lg'>",
      "                        บันทึก",
      "                    </Button>",
      "                </form>",
      "            </CardBody>",
      "        </DialogComponent>",
      "    )",
      "}",
      "",
      "export default ${1/(.*)/${1:/capitalize}/}Dialog"
    ],
    "description": "Dialog Admin v2"
  },
  "Redux Action custom function": {
    "prefix": "rdx-fnc",
    "body": [
      "export function ${1:functionName}(data) {",
      "	return async (dispatch) => {",
      "		try {",
      "			const response = await client.${1:functionName}(data)",
      "			dispatch(set${2:${1/(.*)/${1:/capitalize}/}}List(response.data))",
      "		} catch (error) {",
      "			dispatch(showToast(error, \"bg-red-500\", 3000))",
      "		}",
      "	};",
      "}"
    ],
    "description": "Redux Action custom function"
  }
}
